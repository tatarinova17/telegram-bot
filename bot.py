
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '7836616724:AAEAfgKxr70dUq0xzubfLqScjE0IycBItXY'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

ADMINS = ['mtatarinova']

content = {
    "entry_instructions": (
        "*–ê–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã - –î–µ–∫–∞–±—Ä–∏—Å—Ç–æ–≤ –¥. 93 –∫–≤. 32, –ø–æ–¥—ä–µ–∑–¥ 2, —ç—Ç–∞–∂ 3*.\n"
        "–ö–∞–∫ –ø–æ–¥—ä–µ–¥–µ—Ç–µ –∫ –¥–æ–º—É, –Ω–∞–π–¥–∏—Ç–µ 2Ô∏è‚É£ –ø–æ–¥—ä–µ–∑–¥, –≤—Ö–æ–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥–≤–æ—Ä–∞, –Ω–∞ –¥–æ–º–æ—Ñ–æ–Ω–µ –Ω–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã 3Ô∏è‚É£2Ô∏è‚É£. "
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –∑–≤–æ–Ω–∫–∞, –¥–≤–µ—Ä—å –ø–æ–¥—ä–µ–∑–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è. –ü–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 3Ô∏è‚É£ —ç—Ç–∞–∂. –†—è–¥–æ–º —Å –∫–≤–∞—Ä—Ç–∏—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ–π—Ñ —Å –∫–ª—é—á–∞–º–∏.\n\n"
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—Ñ –æ–ø—É—Å—Ç–∏—Ç–µ —à—Ç–æ—Ä–∫—É, –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–¥ 2Ô∏è‚É£4Ô∏è‚É£7Ô∏è‚É£0Ô∏è‚É£, –Ω–∞–∂–º–∏—Ç–µ —Ä—ã—á–∞–∂–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –ª–µ–≤—É—é —Ä—É–∫—É, "
        "–±–æ–∫—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–±–µ—Ä–µ—Ç–µ –∫–ª—é—á, –∑–∞–∫—Ä–æ–π—Ç–µ –∫—Ä—ã—à–∫—É –±–æ–∫—Å–∞, —Å–±–µ–π—Ç–µ —Ü–∏—Ñ—Ä—ã –≤ —Ö–∞–æ—Ç–∏—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –ø–æ–¥–Ω–∏–º–∏—Ç–µ —à—Ç–æ—Ä–∫—É"
    ),
    "wifi": "–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ üõú: –ª–æ–≥–∏–Ω TATTELECOM_3F91, –ø–∞—Ä–æ–ª—å UENKN7DJ",
    "rules": (
        "*–ü–æ—Å–ª–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç*\n"
        "- –≤–Ω–µ—Å—Ç–∏ –∑–∞–ª–æ–≥ (—Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç) –≤ —Ä–∞–∑–º–µ—Ä–µ 3000 —Ä—É–±–ª–µ–π –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ä—Ç—É 89030928588 –¢ –ë–∞–Ω–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ ¬´–ó–∞–ª–æ–≥¬ª).\n"
        "–ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–±–æ—Ä–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –≤—ã–µ–∑–¥–∞ –≥–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞.\n"
        "‚úîÔ∏è–ö –Ω–∞—Ä—É—à–µ–Ω–∏—è–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è: –ø–æ—Ä—á–∞ –∏–ª–∏ –∫—Ä–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ (–º–µ–±–µ–ª–∏, —Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ—Å—É–¥—ã, —Ç–µ–∫—Å—Ç–∏–ª—è), –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç–∏—à–∏–Ω—ã (—Å 22:00 –¥–æ 7:00), –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫—É—Ä–µ–Ω–∏—è –≤ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª–∏—Ü, –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏\n"
        "‚úîÔ∏è–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –≤–∏–¥—ã –∫—É—Ä–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–≤–µ–¥—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞). –†–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –∫—É—Ä–µ–Ω–∏–µ —Ä–∞–≤–µ–Ω —Å—É–º–º–µ –∑–∞–ª–æ–≥–∞.\n"
        "‚úîÔ∏è–ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –º—É—Å–æ—Ä –≤ –º–µ—Å—Ç–∞—Ö –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –≤ –ø–æ–¥—ä–µ–∑–¥–µ –∏–ª–∏ –ª–µ—Å—Ç–Ω–∏—á–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ: —ç—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–∏ —É—Ö–æ–¥–µ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤—ã–∫–ª—é—á–∞–π—Ç–µ –≤–æ–¥—É, —Å–≤–µ—Ç –∏ –±—ã—Ç–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã.\n"
        "‚úîÔ∏è–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —Å –ª—é–±—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏.\n"
        "‚úîÔ∏è–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 89030928588 –ú–∞—Ä–∏–Ω–∞"
    ),
    "tech_info": "–≠—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç"
}

guest_chat_ids = set()

class EditStates(StatesGroup):
    waiting_for_field = State()
    waiting_for_text = State()
    waiting_for_broadcast = State()

def guest_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–µ–∑–¥—É", "Wi-Fi")
    keyboard.add("–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "–ò–Ω—Ñ–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ")
    keyboard.add("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ö–æ–∑—è–∏–Ω–æ–º")
    return keyboard

def admin_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞–µ–∑–¥—É", "–ò–∑–º–µ–Ω–∏—Ç—å Wi-Fi")
    keyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ")
    keyboard.add("–†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Å—Ç—è–º")
    keyboard.add("–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    guest_chat_ids.add(message.chat.id)
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –≥–æ—Å—Ç–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:"
    )
    await message.answer(welcome_text, reply_markup=guest_menu())

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.username not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=admin_menu())

@dp.message_handler(lambda message: message.from_user.username in ADMINS, content_types=types.ContentTypes.TEXT)
async def admin_commands(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞–µ–∑–¥—É":
        await state.update_data(field="entry_instructions")
        await EditStates.waiting_for_text.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–µ–∑–¥—É:")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å Wi-Fi":
        await state.update_data(field="wifi")
        await EditStates.waiting_for_text.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Wi-Fi:")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è":
        await state.update_data(field="rules")
        await EditStates.waiting_for_text.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ":
        await state.update_data(field="tech_info")
        await EditStates.waiting_for_text.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ:")
    elif text == "–†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Å—Ç—è–º":
        await EditStates.waiting_for_broadcast.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–æ—Å—Ç—è–º:")
    elif text == "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        await state.finish()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=guest_menu())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=admin_menu())

@dp.message_handler(state=EditStates.waiting_for_text, content_types=types.ContentTypes.TEXT)
async def process_edit_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    field = user_data.get("field")
    if field in content:
        content[field] = message.text
        await message.answer(f"–¢–µ–∫—Å—Ç –¥–ª—è *{field}* –æ–±–Ω–æ–≤–ª–µ–Ω.", parse_mode="Markdown", reply_markup=admin_menu())
    else:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu())
    await state.finish()

@dp.message_handler(state=EditStates.waiting_for_broadcast, content_types=types.ContentTypes.TEXT)
async def process_broadcast(message: types.Message, state: FSMContext):
    broadcast_text = message.text
    count = 0
    for chat_id in guest_chat_ids:
        try:
            await bot.send_message(chat_id, f"[–†–∞—Å—Å—ã–ª–∫–∞]\n{broadcast_text}")
            count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –≥–æ—Å—Ç—è–º.", reply_markup=admin_menu())
    await state.finish()

@dp.message_handler(lambda message: message.text in ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–µ–∑–¥—É", "Wi-Fi", "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "–ò–Ω—Ñ–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ", "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ö–æ–∑—è–∏–Ω–æ–º"])
async def guest_menu_handler(message: types.Message):
    txt = message.text
    if txt == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–µ–∑–¥—É":
        await message.answer(content["entry_instructions"], parse_mode="Markdown")
    elif txt == "Wi-Fi":
        await message.answer(content["wifi"])
    elif txt == "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è":
        await message.answer(content["rules"], parse_mode="Markdown")
    elif txt == "–ò–Ω—Ñ–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ":
        await message.answer(content["tech_info"])
    elif txt == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ö–æ–∑—è–∏–Ω–æ–º":
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ–∑—è–∏–Ω—É. –°–ø–∞—Å–∏–±–æ!")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=guest_menu())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)